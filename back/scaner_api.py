from fastapi import FastAPI, APIRouter
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.docs import get_swagger_ui_html
from pydantic import BaseModel
from typing import List
from typing import List, Optional
from uvicorn import run
from lib.config_reader import host, port, log_mode
from lib.scan import scan_state_scan, start_scan, create_json
from lib.nmap import nmap_start
from lib.brute.ssh import scan_state_ssh ,initiation_scan
from lib.brute.ftp import scan_state_ftp, initiation_scan as ftp_initiation_scan
from lib.brute.dirfuzz import scan_state_fuzz, initiation_scan as fuzz_initiation_scan
import os
import sys

# -----------------------------
# –û–±—â–∞—è –º–æ–¥–µ–ª—å
# -----------------------------
class list_transform(BaseModel):
    targets: List[str]
class ListTransform(BaseModel):
    targets: List[str]
    creds: Optional[str] = None
# -----------------------------
# FastAPI init
# -----------------------------
app = FastAPI(
    title="Network Scanner API",
    description="""
    <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏, –ø–æ—Ä—Ç–æ–≤ –∏ brute force SSH</b>
    
    <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ API:</i>
    - üü¢ <b>–†–µ–∞–ª—å–Ω–æ–µ API:</b> /api/
    - üß™ <b>–ú–æ–∫–æ–≤–æ–µ API:</b> /apifake/
    
    <i>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</i>
    - üìö <b>Swagger UI:</b> /docks
    - üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:</b> /restart
    """,
    version="1.0.0",
    docs_url=None,
)

origins = ["http://localhost", "http://localhost:5173","http://127.0.0.1:5173"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -----------------------------
# üìÅ –†–µ–∞–ª—å–Ω—ã–π API
# -----------------------------
real_api = APIRouter(prefix="/api", tags=["Real API"])

@real_api.get("/scanallhost",
             summary="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å",
             description="""
             –°–∫–∞–Ω–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π IP-–¥–∏–∞–ø–∞–∑–æ–Ω (—Ñ–æ—Ä–º–∞—Ç CIDR)
             
             –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
             - `range_ip`: IP-–¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ CIDR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.0/24)
             
             –û—Ç–≤–µ—Ç:
             - `results`: –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
             """,
             responses={
                 200: {
                     "description": "–£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                     "content": {
                         "application/json": {
                             "example": {
                                 "results": [
                                     {
                                         "id": "GEYC4MRUFYYTCLRR",
                                         "ip": "10.24.11.1",
                                         "mac": "00:14:1b:26:28:00",
                                         "hostname": None,
                                         "vendor": "Cisco Systems, Inc"
                                     }
                                 ]
                             }
                         }
                     }
                 },
                 400: {"description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
             })
async def scan_all_host(range_ip: str):
    if scan_state_scan.is_scanning:
        return {"error": "already_started"}
    output = await start_scan(range_ip)
    return {"results": create_json(output)}

@real_api.get("/get_proc/",
             summary="–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
             description="""
             –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
             
             –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:
             - `percent`: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "76.54%")
             - `percent`: "done" –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
             - `error`: "scan_disabled" –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
             """,
             responses={
                 200: {
                     "description": "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                     "content": {
                         "application/json": {
                             "examples": {
                                 "in_progress": {"value": {"percent": "76.54%"}},
                                 "done": {"value": {"percent": "done"}}
                             }
                         }
                     }
                 }
             })
async def get_proc():
    if scan_state_scan.is_scanning:
        return {"percent": f"{scan_state_scan.procent}"}
    elif scan_state_scan.procent is not None:
        scan_state_scan.procent = None
    return {"percent": "done"}
    

@real_api.post("/scanportsbyid/",
              summary="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã",
              description="""
              –°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              
              –û—Ç–≤–µ—Ç:
              - `port_res`: –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
              """,
              responses={
                  200: {
                      "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤",
                      "content": {
                          "application/json": {
                              "example": {
                                  "port_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "ports": [
                                              {"port": 22, "service": "ssh"},
                                              {"port": 445, "service": "microsoft-ds"}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  },
                  400: {"description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
              })
async def scan_ports(request: list_transform):
    result = await nmap_start(request.targets)
    print(result)
    return {"port_res": result}

@real_api.post("/ssh_brute/",
              summary="SSH –±—Ä—É—Ç—Ñ–æ—Ä—Å",
              description="""
              –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SSH –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏
              
              –û—Ç–≤–µ—Ç:
              - `ssh_res`: –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥–±–æ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
              """,
              responses={
                  200: {
                      "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                      "content": {
                          "application/json": {
                              "example": {
                                  "ssh_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "users": [
                                              {"username": "maxim", "password": None},
                                              {"username": "kriptex", "password": "44236"}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  },
                  400: {"description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
              })
async def ssh_brute(request: list_transform):
    result = await initiation_scan(request.targets)
    return {"ssh_res": result}

@real_api.get("/ssh_proc/")
async def ssh_proc():
    if scan_state_ssh.is_scanning:
        return {"percent": f"{scan_state_ssh.procent}"}
    elif scan_state_ssh.procent is not None:
        scan_state_ssh.procent = None
    return {"percent": "done"}

@real_api.post("/ftp_brute/",
              summary="FTP –±—Ä—É—Ç—Ñ–æ—Ä—Å",
              description="""
              –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FTP –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏
              
              –û—Ç–≤–µ—Ç:
              - `ftp_res`: –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥–±–æ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
              """,
              responses={
                  200: {
                      "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                      "content": {
                          "application/json": {
                              "example": {
                                  "ftp_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "users": [
                                              {"username": "anonymous", "password": "anonymous"},
                                              {"username": "admin", "password": "password123"}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  },
                  400: {"description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
              })
async def ftp_brute(request: list_transform):
    result = await ftp_initiation_scan(request.targets)
    return {"ftp_res": result}

@real_api.get("/ftp_proc/")
async def ftp_proc():
    if scan_state_ftp.is_scanning:
        return {"percent": f"{scan_state_ftp.procent}"}
    elif scan_state_ftp.procent is not None:
        scan_state_ftp.procent = None
    return {"percent": "done"}

@real_api.post("/dir_fuzz/",
              summary="–§–∞–∑–∑–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π",
              description="""
              –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∑–∑–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–∞ base32("ip:port")
              - `creds`: Base64-encoded —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ login:username&&password:P@ssw0rd (–æ–ø–∏—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              
              –û—Ç–≤–µ—Ç:
              - `fuzz_res`: –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∞–∑–∑–∏–Ω–≥–∞
              """,
              responses={
                  200: {
                      "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∞–∑–∑–∏–Ω–≥–∞",
                      "content": {
                          "application/json": {
                              "example": {
                                  "fuzz_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "results": [
                                              {"url": "http://192.168.1.3/admin", "status": 200},
                                              {"url": "http://192.168.1.3/secret", "status": 403}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  },
                  400: {"description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
              })
async def dir_fuzz(request: ListTransform):
    result = await fuzz_initiation_scan(request.targets, creds=request.creds)
    return {"fuzz_res": result}

@real_api.get("/fuzz_proc/")
async def fuzz_proc():
    if scan_state_fuzz.is_scanning:
        return {"percent": f"{scan_state_fuzz.procent or '0%'}"}
    elif scan_state_fuzz.procent is not None:
        scan_state_fuzz.procent = None
    return {"percent": "done"}



# -----------------------------
# üß™ –ú–æ–∫–æ–≤—ã–π API
# -----------------------------
fake_api = APIRouter(prefix="/apifake", tags=["Fake API"])

@fake_api.get("/scanallhost/",
             summary="[FAKE] –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å",
             description="""
             –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI
             
             –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
             
             –û—Ç–≤–µ—Ç:
             - `results`: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ö–æ—Å—Ç–æ–≤
             """,
             responses={
                 200: {
                     "description": "–ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                     "content": {
                         "application/json": {
                             "example": {
                                 "results": [
                                     {
                                         "id": "GEYC4MRUFYYTCLRR",
                                         "ip": "10.24.11.1",
                                         "mac": "00:14:1b:26:28:00",
                                         "hostname": None,
                                         "vendor": "Cisco Systems, Inc"
                                     },
                                     {
                                         "id": "GEYC4MRUFYYTCLRS",
                                         "ip": "10.24.11.2",
                                         "mac": "90:9c:4a:b9:7b:3a",
                                         "hostname": "mbp-vladislav.croc.ru",
                                         "vendor": "Apple, Inc."
                                     }
                                 ]
                             }
                         }
                     }
                 }
             })
async def fake_scan_all_host():
    return {
        "results": [
            {
                "id": "GEYC4MRUFYYTCLRR",
                "ip": "10.24.11.1",
                "mac": "00:14:1b:26:28:00",
                "hostname": None,
                "vendor": "Cisco Systems, Inc"
            },
            {
                "id": "GEYC4MRUFYYTCLRS",
                "ip": "10.24.11.2",
                "mac": "90:9c:4a:b9:7b:3a",
                "hostname": "mbp-vladislav.croc.ru",
                "vendor": "Apple, Inc."
            }
        ]
    }

@fake_api.get("/get_proc/",
             summary="[FAKE] –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
             description="""
             –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 76.54% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
             
             –û—Ç–≤–µ—Ç:
             - `percent`: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "76.54%"
             """,
             responses={
                 200: {
                     "description": "–§–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                     "content": {
                         "application/json": {
                             "example": {"percent": "76.54%"}
                         }
                     }
                 }
             })
async def fake_get_proc():
    return {"percent": "76.54%"}

@fake_api.post("/scanportsbyid/",
              summary="[FAKE] –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã",
              description="""
              –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—Ç–∞–º
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
              
              –û—Ç–≤–µ—Ç:
              - `port_res`: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
              """,
              responses={
                  200: {
                      "description": "–ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤",
                      "content": {
                          "application/json": {
                              "example": {
                                  "port_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "ports": [
                                              {"port": 22, "service": "ssh"},
                                              {"port": 445, "service": "microsoft-ds"}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  }
              })
async def fake_scan_ports(request: list_transform):
    return {
        "port_res": [
            {
                "id": id,
                "ports": [
                    {"port": 22, "service": "ssh"},
                    {"port": 445, "service": "microsoft-ds"}
                ]
            } for id in request.targets
        ]
    }

@fake_api.post("/ssh_brute/",
              summary="[FAKE] SSH –±—Ä—É—Ç—Ñ–æ—Ä—Å",
              description="""
              –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
              - `targets`: –ú–∞—Å—Å–∏–≤ ID —Ö–æ—Å—Ç–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
              
              –û—Ç–≤–µ—Ç:
              - `ssh_res`: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
              """,
              responses={
                  200: {
                      "description": "–ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                      "content": {
                          "application/json": {
                              "example": {
                                  "ssh_res": [
                                      {
                                          "id": "GEYC4MRUFYYTCLRR",
                                          "users": [
                                              {"username": "maxim", "password": None},
                                              {"username": "kriptex", "password": "44236"}
                                          ]
                                      }
                                  ]
                              }
                          }
                      }
                  }
              })
async def fake_ssh_brute(request: list_transform):
    return {
        "ssh_res": [
            {
                "id": id,
                "users": [
                    {"username": "maxim", "password": None},
                    {"username": "kriptex", "password": "44236"}
                ]
            } for id in request.targets
        ]
    }

# -----------------------------
# Swagger –ø–æ –∞–¥—Ä–µ—Å—É /docks
# -----------------------------
@app.get("/docks", include_in_schema=False)
async def custom_swagger_ui():
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title="üìö Network Scanner API | Swagger UI",
        swagger_favicon_url="https://fastapi.tiangolo.com/img/favicon.png"
    )

# -----------------------------
# –†—É—á–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
# -----------------------------
@app.get("/restart", tags=["System"], include_in_schema=False)
async def restart():
    os.execv(sys.executable, ['python'] + sys.argv)

# -----------------------------
# –ú–∞—Ä—à—Ä—É—Ç—ã –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
app.include_router(real_api)
app.include_router(fake_api)

def print_routes():
    print(f"\nüöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
    print(f"üìö Swagger UI:  http://{host}:{port}/docks")
    print(f"üü¢ –†–µ–∞–ª—å–Ω–æ–µ API: http://{host}:{port}/api/")
    print(f"üß™ –ú–æ–∫–æ–≤–æ–µ API:  http://{host}:{port}/apifake/")
    print(f"üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:   http://{host}:{port}/restart\n")

if __name__ == "__main__":
    print_routes()
    run(app, host=host, port=port, log_level=log_mode)